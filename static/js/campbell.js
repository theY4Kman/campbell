// Generated by CoffeeScript 1.6.1
(function() {
  var app;

  app = angular.module('campbell', ['LocalStorageModule']);

  app.directive('hallo', function() {
    return {
      link: function(scope, element, attrs) {
        var $element, initial_html;
        $element = $(element);
        initial_html = scope.$eval(attrs.halloText);
        element.html(initial_html.length > 0 ? initial_html : '&nbsp;');
        $element.hallo();
        scope.$watch(attrs.halloText, function() {
          return $element.html(scope.$eval(attrs.halloText));
        });
        $element.on('hallomodified', function() {
          var after, after_div_text, before, child_nodes, content, escaped, last_node, newline_idx;
          content = element.html();
          newline_idx = content.indexOf('<div>');
          if (newline_idx >= 0) {
            before = content = content.substring(0, newline_idx);
            child_nodes = element[0].childNodes;
            last_node = child_nodes[child_nodes.length - 1];
            after_div_text = last_node.nodeType === 3 ? last_node.nodeValue : '';
            after = element.find('div').text() + after_div_text;
            element.html(before);
            scope.$emit('hallosplit', element, scope.$eval(attrs.halloId), after);
          }
          scope.$emit('hallomodified', element);
          escaped = content.replace('"', '\\"');
          scope.$eval(attrs.halloText + ' = "' + escaped + '"');
          return scope.$apply();
        });
        return $element.focus();
      }
    };
  });

  app.directive('distilledInitial', function() {
    return {
      link: function(scope, element, attrs) {
        scope.$watch(attrs.ngModel, function() {
          return element.html(scope.$eval(attrs.ngModel));
        });
        return element.on('click', function() {
          return scope.$emit('distilledinitialclick');
        });
      }
    };
  });

  app.directive('distilledBlock', function($rootScope) {
    return {
      link: function(scope, element, attrs) {
        scope.height = function() {
          return $(element).height();
        };
        scope.$on('hallomodified', function(evt, element) {
          return $rootScope.$broadcast('distilledmodified', scope);
        });
        scope.$watch('block.replacements', function() {
          return $rootScope.$broadcast('distilledmodified', scope);
        }, true);
        scope.$on('distilledinitialclick', function() {
          var $replacements, replacement;
          $replacements = $(element).find('.replacements > p');
          if ($replacements.length) {
            return $replacements.first().focus();
          } else {
            replacement = scope.newReplacement();
            scope.insertReplacementAfter(replacement, scope.block);
            return scope.$apply();
          }
        });
        return $rootScope.$broadcast('distilledcreated', scope);
      }
    };
  });

  app.controller('CampbellCtrl', function($scope) {
    var paragraph_counter;
    $scope.blocks = [];
    paragraph_counter = 0;
    $scope.nextId = function() {
      return paragraph_counter++;
    };
    $scope.newReplacement = function(text) {
      if (text == null) {
        text = '';
      }
      return {
        id: $scope.nextId(),
        text: text
      };
    };
    $scope.newBlock = function(initial, replacements) {
      var text;
      if (initial == null) {
        initial = '';
      }
      if (replacements == null) {
        replacements = [];
      }
      return {
        id: $scope.nextId(),
        initial: initial,
        replacements: (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = replacements.length; _i < _len; _i++) {
            text = replacements[_i];
            _results.push($scope.newReplacement(text));
          }
          return _results;
        })()
      };
    };
    $scope.insertBlockAfter = function(block, id) {
      var cur_block, i, _i, _len, _ref, _results;
      if (id != null) {
        _ref = $scope.blocks;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          cur_block = _ref[i];
          if (cur_block.id === id) {
            $scope.blocks.splice(i + 1, 0, block);
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } else {
        return $scope.blocks.push(block);
      }
    };
    $scope.insertReplacementAfter = function(replacement, block, id) {
      var cur_replacement, i, _i, _len, _ref, _results;
      if (id != null) {
        _ref = block.replacements;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          cur_replacement = _ref[i];
          if (cur_replacement.id === id) {
            block.replacements.splice(i + 1, 0, replacement);
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } else {
        return block.replacements.push(replacement);
      }
    };
    return $scope.insertBlockAfter($scope.newBlock('Edit me', ['Edit me, too']));
  });

  app.controller('InitialCtrl', function($scope, $timeout) {
    var matchDistilledHeight;
    $scope.getElementOfBlock = function(id) {
      return document.querySelector('#initial' + id);
    };
    $scope.$on('hallosplit', function(evt, element, id, text) {
      var block;
      block = $scope.newBlock(text);
      return $scope.insertBlockAfter(block, id);
    });
    matchDistilledHeight = function(evt, distilled) {
      return $timeout(function() {
        var $paragraph;
        $paragraph = $($scope.getElementOfBlock(distilled.block.id));
        return $paragraph.height(distilled.height());
      });
    };
    $scope.$on('distilledmodified', matchDistilledHeight);
    return $scope.$on('distilledcreated', matchDistilledHeight);
  });

  app.controller('ReplacementsCtrl', function($scope) {
    return $scope.$on('hallosplit', function(evt, element, id, text) {
      var replacement;
      replacement = $scope.newReplacement(text);
      return $scope.insertReplacementAfter(replacement, $scope.block, id);
    });
  });

  app.controller('DistilledCtrl', function($scope, $rootScope) {});

}).call(this);
